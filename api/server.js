// importing necessary module for the server...
import express from 'express'; 
import bodyParser from 'body-parser'; 
import cors from 'cors'; 
import path from 'path'; 
import { fileURLToPath } from 'url';
// importing the database setup and initialization...
import { db, initDB } from './db/db.js';

// to obtain the __dirname path in an ES6 module...
const __filename = fileURLToPath(import.meta.url); 
const __dirname = path.dirname(__filename); 

// creating an instance of express...
const app = express(); 
const PORT = 3000; // define the port number...

// middleware setup...
app.use(cors()); // enable cross-origin resource sharing...
app.use(bodyParser.json()); // parse incoming JSON requests...
app.use(express.static(path.join(__dirname, '..', 'client'))); // server static files from the 'client' directory...

// importing routes with db instance...
import authRoutesFactory from './routes/auth.js'; 
import userRoutesFactory from './routes/user.js'; 

// initializing routes with the db instace...
const authRoutes = authRoutesFactory(db); 
const userRoutes = userRoutesFactory(db); 

// setting up routes...
app.use('/auth', authRoutes); 
app.use('/user', userRoutes); 
// TODO: borrar...
app.use('/hola', (_req, res) => {
    res.send('<div style="color: red;">hola</div>');
});

// initialize the db and then start the server...
initDB().then(() => {
    // start the server and listen on the defined port...
    app.listen(PORT, () => {
        console.log(`Server is running on http://localhost:${PORT}`); 
    });
}).catch(error => {
    // handle any error that occur during db initialization...
    console.log('Filed to initialize database', error); 
});